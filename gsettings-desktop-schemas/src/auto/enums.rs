// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use glib::translate::*;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopBackgroundShading")]
pub enum BackgroundShading {
    #[doc(alias = "G_DESKTOP_BACKGROUND_SHADING_SOLID")]
    Solid,
    #[doc(alias = "G_DESKTOP_BACKGROUND_SHADING_VERTICAL")]
    Vertical,
    #[doc(alias = "G_DESKTOP_BACKGROUND_SHADING_HORIZONTAL")]
    Horizontal,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for BackgroundShading {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "BackgroundShading::{}",
            match *self {
                Self::Solid => "Solid",
                Self::Vertical => "Vertical",
                Self::Horizontal => "Horizontal",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for BackgroundShading {
    type GlibType = ffi::GDesktopBackgroundShading;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopBackgroundShading {
        match self {
            Self::Solid => ffi::G_DESKTOP_BACKGROUND_SHADING_SOLID,
            Self::Vertical => ffi::G_DESKTOP_BACKGROUND_SHADING_VERTICAL,
            Self::Horizontal => ffi::G_DESKTOP_BACKGROUND_SHADING_HORIZONTAL,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopBackgroundShading> for BackgroundShading {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopBackgroundShading) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_BACKGROUND_SHADING_SOLID => Self::Solid,
            ffi::G_DESKTOP_BACKGROUND_SHADING_VERTICAL => Self::Vertical,
            ffi::G_DESKTOP_BACKGROUND_SHADING_HORIZONTAL => Self::Horizontal,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopBackgroundStyle")]
pub enum BackgroundStyle {
    #[doc(alias = "G_DESKTOP_BACKGROUND_STYLE_NONE")]
    None,
    #[doc(alias = "G_DESKTOP_BACKGROUND_STYLE_WALLPAPER")]
    Wallpaper,
    #[doc(alias = "G_DESKTOP_BACKGROUND_STYLE_CENTERED")]
    Centered,
    #[doc(alias = "G_DESKTOP_BACKGROUND_STYLE_SCALED")]
    Scaled,
    #[doc(alias = "G_DESKTOP_BACKGROUND_STYLE_STRETCHED")]
    Stretched,
    #[doc(alias = "G_DESKTOP_BACKGROUND_STYLE_ZOOM")]
    Zoom,
    #[doc(alias = "G_DESKTOP_BACKGROUND_STYLE_SPANNED")]
    Spanned,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for BackgroundStyle {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "BackgroundStyle::{}",
            match *self {
                Self::None => "None",
                Self::Wallpaper => "Wallpaper",
                Self::Centered => "Centered",
                Self::Scaled => "Scaled",
                Self::Stretched => "Stretched",
                Self::Zoom => "Zoom",
                Self::Spanned => "Spanned",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for BackgroundStyle {
    type GlibType = ffi::GDesktopBackgroundStyle;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopBackgroundStyle {
        match self {
            Self::None => ffi::G_DESKTOP_BACKGROUND_STYLE_NONE,
            Self::Wallpaper => ffi::G_DESKTOP_BACKGROUND_STYLE_WALLPAPER,
            Self::Centered => ffi::G_DESKTOP_BACKGROUND_STYLE_CENTERED,
            Self::Scaled => ffi::G_DESKTOP_BACKGROUND_STYLE_SCALED,
            Self::Stretched => ffi::G_DESKTOP_BACKGROUND_STYLE_STRETCHED,
            Self::Zoom => ffi::G_DESKTOP_BACKGROUND_STYLE_ZOOM,
            Self::Spanned => ffi::G_DESKTOP_BACKGROUND_STYLE_SPANNED,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopBackgroundStyle> for BackgroundStyle {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopBackgroundStyle) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_BACKGROUND_STYLE_NONE => Self::None,
            ffi::G_DESKTOP_BACKGROUND_STYLE_WALLPAPER => Self::Wallpaper,
            ffi::G_DESKTOP_BACKGROUND_STYLE_CENTERED => Self::Centered,
            ffi::G_DESKTOP_BACKGROUND_STYLE_SCALED => Self::Scaled,
            ffi::G_DESKTOP_BACKGROUND_STYLE_STRETCHED => Self::Stretched,
            ffi::G_DESKTOP_BACKGROUND_STYLE_ZOOM => Self::Zoom,
            ffi::G_DESKTOP_BACKGROUND_STYLE_SPANNED => Self::Spanned,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopClockFormat")]
pub enum ClockFormat {
    #[doc(alias = "G_DESKTOP_CLOCK_FORMAT_24H")]
    _24h,
    #[doc(alias = "G_DESKTOP_CLOCK_FORMAT_12H")]
    _12h,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ClockFormat {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ClockFormat::{}",
            match *self {
                Self::_24h => "_24h",
                Self::_12h => "_12h",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for ClockFormat {
    type GlibType = ffi::GDesktopClockFormat;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopClockFormat {
        match self {
            Self::_24h => ffi::G_DESKTOP_CLOCK_FORMAT_24H,
            Self::_12h => ffi::G_DESKTOP_CLOCK_FORMAT_12H,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopClockFormat> for ClockFormat {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopClockFormat) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_CLOCK_FORMAT_24H => Self::_24h,
            ffi::G_DESKTOP_CLOCK_FORMAT_12H => Self::_12h,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopColorScheme")]
pub enum ColorScheme {
    #[doc(alias = "G_DESKTOP_COLOR_SCHEME_DEFAULT")]
    Default,
    #[doc(alias = "G_DESKTOP_COLOR_SCHEME_PREFER_DARK")]
    PreferDark,
    #[doc(alias = "G_DESKTOP_COLOR_SCHEME_PREFER_LIGHT")]
    PreferLight,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ColorScheme {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ColorScheme::{}",
            match *self {
                Self::Default => "Default",
                Self::PreferDark => "PreferDark",
                Self::PreferLight => "PreferLight",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for ColorScheme {
    type GlibType = ffi::GDesktopColorScheme;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopColorScheme {
        match self {
            Self::Default => ffi::G_DESKTOP_COLOR_SCHEME_DEFAULT,
            Self::PreferDark => ffi::G_DESKTOP_COLOR_SCHEME_PREFER_DARK,
            Self::PreferLight => ffi::G_DESKTOP_COLOR_SCHEME_PREFER_LIGHT,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopColorScheme> for ColorScheme {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopColorScheme) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_COLOR_SCHEME_DEFAULT => Self::Default,
            ffi::G_DESKTOP_COLOR_SCHEME_PREFER_DARK => Self::PreferDark,
            ffi::G_DESKTOP_COLOR_SCHEME_PREFER_LIGHT => Self::PreferLight,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopDeviceSendEvents")]
pub enum DeviceSendEvents {
    #[doc(alias = "G_DESKTOP_DEVICE_SEND_EVENTS_ENABLED")]
    Enabled,
    #[doc(alias = "G_DESKTOP_DEVICE_SEND_EVENTS_DISABLED")]
    Disabled,
    #[doc(alias = "G_DESKTOP_DEVICE_SEND_EVENTS_DISABLED_ON_EXTERNAL_MOUSE")]
    DisabledOnExternalMouse,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for DeviceSendEvents {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "DeviceSendEvents::{}",
            match *self {
                Self::Enabled => "Enabled",
                Self::Disabled => "Disabled",
                Self::DisabledOnExternalMouse => "DisabledOnExternalMouse",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for DeviceSendEvents {
    type GlibType = ffi::GDesktopDeviceSendEvents;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopDeviceSendEvents {
        match self {
            Self::Enabled => ffi::G_DESKTOP_DEVICE_SEND_EVENTS_ENABLED,
            Self::Disabled => ffi::G_DESKTOP_DEVICE_SEND_EVENTS_DISABLED,
            Self::DisabledOnExternalMouse => {
                ffi::G_DESKTOP_DEVICE_SEND_EVENTS_DISABLED_ON_EXTERNAL_MOUSE
            }
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopDeviceSendEvents> for DeviceSendEvents {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopDeviceSendEvents) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_DEVICE_SEND_EVENTS_ENABLED => Self::Enabled,
            ffi::G_DESKTOP_DEVICE_SEND_EVENTS_DISABLED => Self::Disabled,
            ffi::G_DESKTOP_DEVICE_SEND_EVENTS_DISABLED_ON_EXTERNAL_MOUSE => {
                Self::DisabledOnExternalMouse
            }
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopFocusMode")]
pub enum FocusMode {
    #[doc(alias = "G_DESKTOP_FOCUS_MODE_CLICK")]
    Click,
    #[doc(alias = "G_DESKTOP_FOCUS_MODE_SLOPPY")]
    Sloppy,
    #[doc(alias = "G_DESKTOP_FOCUS_MODE_MOUSE")]
    Mouse,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FocusMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "FocusMode::{}",
            match *self {
                Self::Click => "Click",
                Self::Sloppy => "Sloppy",
                Self::Mouse => "Mouse",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for FocusMode {
    type GlibType = ffi::GDesktopFocusMode;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopFocusMode {
        match self {
            Self::Click => ffi::G_DESKTOP_FOCUS_MODE_CLICK,
            Self::Sloppy => ffi::G_DESKTOP_FOCUS_MODE_SLOPPY,
            Self::Mouse => ffi::G_DESKTOP_FOCUS_MODE_MOUSE,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopFocusMode> for FocusMode {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopFocusMode) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_FOCUS_MODE_CLICK => Self::Click,
            ffi::G_DESKTOP_FOCUS_MODE_SLOPPY => Self::Sloppy,
            ffi::G_DESKTOP_FOCUS_MODE_MOUSE => Self::Mouse,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopFocusNewWindows")]
pub enum FocusNewWindows {
    #[doc(alias = "G_DESKTOP_FOCUS_NEW_WINDOWS_SMART")]
    Smart,
    #[doc(alias = "G_DESKTOP_FOCUS_NEW_WINDOWS_STRICT")]
    Strict,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FocusNewWindows {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "FocusNewWindows::{}",
            match *self {
                Self::Smart => "Smart",
                Self::Strict => "Strict",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for FocusNewWindows {
    type GlibType = ffi::GDesktopFocusNewWindows;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopFocusNewWindows {
        match self {
            Self::Smart => ffi::G_DESKTOP_FOCUS_NEW_WINDOWS_SMART,
            Self::Strict => ffi::G_DESKTOP_FOCUS_NEW_WINDOWS_STRICT,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopFocusNewWindows> for FocusNewWindows {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopFocusNewWindows) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_FOCUS_NEW_WINDOWS_SMART => Self::Smart,
            ffi::G_DESKTOP_FOCUS_NEW_WINDOWS_STRICT => Self::Strict,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopFontAntialiasingMode")]
pub enum FontAntialiasingMode {
    #[doc(alias = "G_DESKTOP_FONT_ANTIALIASING_MODE_NONE")]
    None,
    #[doc(alias = "G_DESKTOP_FONT_ANTIALIASING_MODE_GRAYSCALE")]
    Grayscale,
    #[doc(alias = "G_DESKTOP_FONT_ANTIALIASING_MODE_RGBA")]
    Rgba,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FontAntialiasingMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "FontAntialiasingMode::{}",
            match *self {
                Self::None => "None",
                Self::Grayscale => "Grayscale",
                Self::Rgba => "Rgba",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for FontAntialiasingMode {
    type GlibType = ffi::GDesktopFontAntialiasingMode;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopFontAntialiasingMode {
        match self {
            Self::None => ffi::G_DESKTOP_FONT_ANTIALIASING_MODE_NONE,
            Self::Grayscale => ffi::G_DESKTOP_FONT_ANTIALIASING_MODE_GRAYSCALE,
            Self::Rgba => ffi::G_DESKTOP_FONT_ANTIALIASING_MODE_RGBA,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopFontAntialiasingMode> for FontAntialiasingMode {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopFontAntialiasingMode) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_FONT_ANTIALIASING_MODE_NONE => Self::None,
            ffi::G_DESKTOP_FONT_ANTIALIASING_MODE_GRAYSCALE => Self::Grayscale,
            ffi::G_DESKTOP_FONT_ANTIALIASING_MODE_RGBA => Self::Rgba,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopFontHinting")]
pub enum FontHinting {
    #[doc(alias = "G_DESKTOP_FONT_HINTING_NONE")]
    None,
    #[doc(alias = "G_DESKTOP_FONT_HINTING_SLIGHT")]
    Slight,
    #[doc(alias = "G_DESKTOP_FONT_HINTING_MEDIUM")]
    Medium,
    #[doc(alias = "G_DESKTOP_FONT_HINTING_FULL")]
    Full,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FontHinting {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "FontHinting::{}",
            match *self {
                Self::None => "None",
                Self::Slight => "Slight",
                Self::Medium => "Medium",
                Self::Full => "Full",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for FontHinting {
    type GlibType = ffi::GDesktopFontHinting;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopFontHinting {
        match self {
            Self::None => ffi::G_DESKTOP_FONT_HINTING_NONE,
            Self::Slight => ffi::G_DESKTOP_FONT_HINTING_SLIGHT,
            Self::Medium => ffi::G_DESKTOP_FONT_HINTING_MEDIUM,
            Self::Full => ffi::G_DESKTOP_FONT_HINTING_FULL,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopFontHinting> for FontHinting {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopFontHinting) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_FONT_HINTING_NONE => Self::None,
            ffi::G_DESKTOP_FONT_HINTING_SLIGHT => Self::Slight,
            ffi::G_DESKTOP_FONT_HINTING_MEDIUM => Self::Medium,
            ffi::G_DESKTOP_FONT_HINTING_FULL => Self::Full,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopFontRgbaOrder")]
pub enum FontRgbaOrder {
    #[doc(alias = "G_DESKTOP_FONT_RGBA_ORDER_RGBA")]
    Rgba,
    #[doc(alias = "G_DESKTOP_FONT_RGBA_ORDER_RGB")]
    Rgb,
    #[doc(alias = "G_DESKTOP_FONT_RGBA_ORDER_BGR")]
    Bgr,
    #[doc(alias = "G_DESKTOP_FONT_RGBA_ORDER_VRGB")]
    Vrgb,
    #[doc(alias = "G_DESKTOP_FONT_RGBA_ORDER_VBGR")]
    Vbgr,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FontRgbaOrder {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "FontRgbaOrder::{}",
            match *self {
                Self::Rgba => "Rgba",
                Self::Rgb => "Rgb",
                Self::Bgr => "Bgr",
                Self::Vrgb => "Vrgb",
                Self::Vbgr => "Vbgr",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for FontRgbaOrder {
    type GlibType = ffi::GDesktopFontRgbaOrder;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopFontRgbaOrder {
        match self {
            Self::Rgba => ffi::G_DESKTOP_FONT_RGBA_ORDER_RGBA,
            Self::Rgb => ffi::G_DESKTOP_FONT_RGBA_ORDER_RGB,
            Self::Bgr => ffi::G_DESKTOP_FONT_RGBA_ORDER_BGR,
            Self::Vrgb => ffi::G_DESKTOP_FONT_RGBA_ORDER_VRGB,
            Self::Vbgr => ffi::G_DESKTOP_FONT_RGBA_ORDER_VBGR,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopFontRgbaOrder> for FontRgbaOrder {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopFontRgbaOrder) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_FONT_RGBA_ORDER_RGBA => Self::Rgba,
            ffi::G_DESKTOP_FONT_RGBA_ORDER_RGB => Self::Rgb,
            ffi::G_DESKTOP_FONT_RGBA_ORDER_BGR => Self::Bgr,
            ffi::G_DESKTOP_FONT_RGBA_ORDER_VRGB => Self::Vrgb,
            ffi::G_DESKTOP_FONT_RGBA_ORDER_VBGR => Self::Vbgr,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopLocationAccuracyLevel")]
pub enum LocationAccuracyLevel {
    #[doc(alias = "G_DESKTOP_LOCATION_ACCURACY_LEVEL_COUNTRY")]
    Country,
    #[doc(alias = "G_DESKTOP_LOCATION_ACCURACY_LEVEL_CITY")]
    City,
    #[doc(alias = "G_DESKTOP_LOCATION_ACCURACY_LEVEL_NEIGHBORHOOD")]
    Neighborhood,
    #[doc(alias = "G_DESKTOP_LOCATION_ACCURACY_LEVEL_STREET")]
    Street,
    #[doc(alias = "G_DESKTOP_LOCATION_ACCURACY_LEVEL_EXACT")]
    Exact,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for LocationAccuracyLevel {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "LocationAccuracyLevel::{}",
            match *self {
                Self::Country => "Country",
                Self::City => "City",
                Self::Neighborhood => "Neighborhood",
                Self::Street => "Street",
                Self::Exact => "Exact",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for LocationAccuracyLevel {
    type GlibType = ffi::GDesktopLocationAccuracyLevel;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopLocationAccuracyLevel {
        match self {
            Self::Country => ffi::G_DESKTOP_LOCATION_ACCURACY_LEVEL_COUNTRY,
            Self::City => ffi::G_DESKTOP_LOCATION_ACCURACY_LEVEL_CITY,
            Self::Neighborhood => ffi::G_DESKTOP_LOCATION_ACCURACY_LEVEL_NEIGHBORHOOD,
            Self::Street => ffi::G_DESKTOP_LOCATION_ACCURACY_LEVEL_STREET,
            Self::Exact => ffi::G_DESKTOP_LOCATION_ACCURACY_LEVEL_EXACT,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopLocationAccuracyLevel> for LocationAccuracyLevel {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopLocationAccuracyLevel) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_LOCATION_ACCURACY_LEVEL_COUNTRY => Self::Country,
            ffi::G_DESKTOP_LOCATION_ACCURACY_LEVEL_CITY => Self::City,
            ffi::G_DESKTOP_LOCATION_ACCURACY_LEVEL_NEIGHBORHOOD => Self::Neighborhood,
            ffi::G_DESKTOP_LOCATION_ACCURACY_LEVEL_STREET => Self::Street,
            ffi::G_DESKTOP_LOCATION_ACCURACY_LEVEL_EXACT => Self::Exact,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopMagnifierCaretTrackingMode")]
pub enum MagnifierCaretTrackingMode {
    #[doc(alias = "G_DESKTOP_MAGNIFIER_CARET_TRACKING_MODE_NONE")]
    None,
    #[doc(alias = "G_DESKTOP_MAGNIFIER_CARET_TRACKING_MODE_CENTERED")]
    Centered,
    #[doc(alias = "G_DESKTOP_MAGNIFIER_CARET_TRACKING_MODE_PROPORTIONAL")]
    Proportional,
    #[doc(alias = "G_DESKTOP_MAGNIFIER_CARET_TRACKING_MODE_PUSH")]
    Push,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for MagnifierCaretTrackingMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "MagnifierCaretTrackingMode::{}",
            match *self {
                Self::None => "None",
                Self::Centered => "Centered",
                Self::Proportional => "Proportional",
                Self::Push => "Push",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for MagnifierCaretTrackingMode {
    type GlibType = ffi::GDesktopMagnifierCaretTrackingMode;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopMagnifierCaretTrackingMode {
        match self {
            Self::None => ffi::G_DESKTOP_MAGNIFIER_CARET_TRACKING_MODE_NONE,
            Self::Centered => ffi::G_DESKTOP_MAGNIFIER_CARET_TRACKING_MODE_CENTERED,
            Self::Proportional => ffi::G_DESKTOP_MAGNIFIER_CARET_TRACKING_MODE_PROPORTIONAL,
            Self::Push => ffi::G_DESKTOP_MAGNIFIER_CARET_TRACKING_MODE_PUSH,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopMagnifierCaretTrackingMode> for MagnifierCaretTrackingMode {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopMagnifierCaretTrackingMode) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_MAGNIFIER_CARET_TRACKING_MODE_NONE => Self::None,
            ffi::G_DESKTOP_MAGNIFIER_CARET_TRACKING_MODE_CENTERED => Self::Centered,
            ffi::G_DESKTOP_MAGNIFIER_CARET_TRACKING_MODE_PROPORTIONAL => Self::Proportional,
            ffi::G_DESKTOP_MAGNIFIER_CARET_TRACKING_MODE_PUSH => Self::Push,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopMagnifierFocusTrackingMode")]
pub enum MagnifierFocusTrackingMode {
    #[doc(alias = "G_DESKTOP_MAGNIFIER_FOCUS_TRACKING_MODE_NONE")]
    None,
    #[doc(alias = "G_DESKTOP_MAGNIFIER_FOCUS_TRACKING_MODE_CENTERED")]
    Centered,
    #[doc(alias = "G_DESKTOP_MAGNIFIER_FOCUS_TRACKING_MODE_PROPORTIONAL")]
    Proportional,
    #[doc(alias = "G_DESKTOP_MAGNIFIER_FOCUS_TRACKING_MODE_PUSH")]
    Push,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for MagnifierFocusTrackingMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "MagnifierFocusTrackingMode::{}",
            match *self {
                Self::None => "None",
                Self::Centered => "Centered",
                Self::Proportional => "Proportional",
                Self::Push => "Push",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for MagnifierFocusTrackingMode {
    type GlibType = ffi::GDesktopMagnifierFocusTrackingMode;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopMagnifierFocusTrackingMode {
        match self {
            Self::None => ffi::G_DESKTOP_MAGNIFIER_FOCUS_TRACKING_MODE_NONE,
            Self::Centered => ffi::G_DESKTOP_MAGNIFIER_FOCUS_TRACKING_MODE_CENTERED,
            Self::Proportional => ffi::G_DESKTOP_MAGNIFIER_FOCUS_TRACKING_MODE_PROPORTIONAL,
            Self::Push => ffi::G_DESKTOP_MAGNIFIER_FOCUS_TRACKING_MODE_PUSH,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopMagnifierFocusTrackingMode> for MagnifierFocusTrackingMode {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopMagnifierFocusTrackingMode) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_MAGNIFIER_FOCUS_TRACKING_MODE_NONE => Self::None,
            ffi::G_DESKTOP_MAGNIFIER_FOCUS_TRACKING_MODE_CENTERED => Self::Centered,
            ffi::G_DESKTOP_MAGNIFIER_FOCUS_TRACKING_MODE_PROPORTIONAL => Self::Proportional,
            ffi::G_DESKTOP_MAGNIFIER_FOCUS_TRACKING_MODE_PUSH => Self::Push,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopMagnifierMouseTrackingMode")]
pub enum MagnifierMouseTrackingMode {
    #[doc(alias = "G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_NONE")]
    None,
    #[doc(alias = "G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_CENTERED")]
    Centered,
    #[doc(alias = "G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_PROPORTIONAL")]
    Proportional,
    #[doc(alias = "G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_PUSH")]
    Push,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for MagnifierMouseTrackingMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "MagnifierMouseTrackingMode::{}",
            match *self {
                Self::None => "None",
                Self::Centered => "Centered",
                Self::Proportional => "Proportional",
                Self::Push => "Push",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for MagnifierMouseTrackingMode {
    type GlibType = ffi::GDesktopMagnifierMouseTrackingMode;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopMagnifierMouseTrackingMode {
        match self {
            Self::None => ffi::G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_NONE,
            Self::Centered => ffi::G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_CENTERED,
            Self::Proportional => ffi::G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_PROPORTIONAL,
            Self::Push => ffi::G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_PUSH,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopMagnifierMouseTrackingMode> for MagnifierMouseTrackingMode {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopMagnifierMouseTrackingMode) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_NONE => Self::None,
            ffi::G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_CENTERED => Self::Centered,
            ffi::G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_PROPORTIONAL => Self::Proportional,
            ffi::G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_PUSH => Self::Push,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopMagnifierScreenPosition")]
pub enum MagnifierScreenPosition {
    #[doc(alias = "G_DESKTOP_MAGNIFIER_SCREEN_POSITION_NONE")]
    None,
    #[doc(alias = "G_DESKTOP_MAGNIFIER_SCREEN_POSITION_FULL_SCREEN")]
    FullScreen,
    #[doc(alias = "G_DESKTOP_MAGNIFIER_SCREEN_POSITION_TOP_HALF")]
    TopHalf,
    #[doc(alias = "G_DESKTOP_MAGNIFIER_SCREEN_POSITION_BOTTOM_HALF")]
    BottomHalf,
    #[doc(alias = "G_DESKTOP_MAGNIFIER_SCREEN_POSITION_LEFT_HALF")]
    LeftHalf,
    #[doc(alias = "G_DESKTOP_MAGNIFIER_SCREEN_POSITION_RIGHT_HALF")]
    RightHalf,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for MagnifierScreenPosition {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "MagnifierScreenPosition::{}",
            match *self {
                Self::None => "None",
                Self::FullScreen => "FullScreen",
                Self::TopHalf => "TopHalf",
                Self::BottomHalf => "BottomHalf",
                Self::LeftHalf => "LeftHalf",
                Self::RightHalf => "RightHalf",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for MagnifierScreenPosition {
    type GlibType = ffi::GDesktopMagnifierScreenPosition;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopMagnifierScreenPosition {
        match self {
            Self::None => ffi::G_DESKTOP_MAGNIFIER_SCREEN_POSITION_NONE,
            Self::FullScreen => ffi::G_DESKTOP_MAGNIFIER_SCREEN_POSITION_FULL_SCREEN,
            Self::TopHalf => ffi::G_DESKTOP_MAGNIFIER_SCREEN_POSITION_TOP_HALF,
            Self::BottomHalf => ffi::G_DESKTOP_MAGNIFIER_SCREEN_POSITION_BOTTOM_HALF,
            Self::LeftHalf => ffi::G_DESKTOP_MAGNIFIER_SCREEN_POSITION_LEFT_HALF,
            Self::RightHalf => ffi::G_DESKTOP_MAGNIFIER_SCREEN_POSITION_RIGHT_HALF,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopMagnifierScreenPosition> for MagnifierScreenPosition {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopMagnifierScreenPosition) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_MAGNIFIER_SCREEN_POSITION_NONE => Self::None,
            ffi::G_DESKTOP_MAGNIFIER_SCREEN_POSITION_FULL_SCREEN => Self::FullScreen,
            ffi::G_DESKTOP_MAGNIFIER_SCREEN_POSITION_TOP_HALF => Self::TopHalf,
            ffi::G_DESKTOP_MAGNIFIER_SCREEN_POSITION_BOTTOM_HALF => Self::BottomHalf,
            ffi::G_DESKTOP_MAGNIFIER_SCREEN_POSITION_LEFT_HALF => Self::LeftHalf,
            ffi::G_DESKTOP_MAGNIFIER_SCREEN_POSITION_RIGHT_HALF => Self::RightHalf,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopMouseDwellDirection")]
pub enum MouseDwellDirection {
    #[doc(alias = "G_DESKTOP_MOUSE_DWELL_DIRECTION_LEFT")]
    Left,
    #[doc(alias = "G_DESKTOP_MOUSE_DWELL_DIRECTION_RIGHT")]
    Right,
    #[doc(alias = "G_DESKTOP_MOUSE_DWELL_DIRECTION_UP")]
    Up,
    #[doc(alias = "G_DESKTOP_MOUSE_DWELL_DIRECTION_DOWN")]
    Down,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for MouseDwellDirection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "MouseDwellDirection::{}",
            match *self {
                Self::Left => "Left",
                Self::Right => "Right",
                Self::Up => "Up",
                Self::Down => "Down",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for MouseDwellDirection {
    type GlibType = ffi::GDesktopMouseDwellDirection;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopMouseDwellDirection {
        match self {
            Self::Left => ffi::G_DESKTOP_MOUSE_DWELL_DIRECTION_LEFT,
            Self::Right => ffi::G_DESKTOP_MOUSE_DWELL_DIRECTION_RIGHT,
            Self::Up => ffi::G_DESKTOP_MOUSE_DWELL_DIRECTION_UP,
            Self::Down => ffi::G_DESKTOP_MOUSE_DWELL_DIRECTION_DOWN,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopMouseDwellDirection> for MouseDwellDirection {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopMouseDwellDirection) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_MOUSE_DWELL_DIRECTION_LEFT => Self::Left,
            ffi::G_DESKTOP_MOUSE_DWELL_DIRECTION_RIGHT => Self::Right,
            ffi::G_DESKTOP_MOUSE_DWELL_DIRECTION_UP => Self::Up,
            ffi::G_DESKTOP_MOUSE_DWELL_DIRECTION_DOWN => Self::Down,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopMouseDwellMode")]
pub enum MouseDwellMode {
    #[doc(alias = "G_DESKTOP_MOUSE_DWELL_MODE_WINDOW")]
    Window,
    #[doc(alias = "G_DESKTOP_MOUSE_DWELL_MODE_GESTURE")]
    Gesture,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for MouseDwellMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "MouseDwellMode::{}",
            match *self {
                Self::Window => "Window",
                Self::Gesture => "Gesture",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for MouseDwellMode {
    type GlibType = ffi::GDesktopMouseDwellMode;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopMouseDwellMode {
        match self {
            Self::Window => ffi::G_DESKTOP_MOUSE_DWELL_MODE_WINDOW,
            Self::Gesture => ffi::G_DESKTOP_MOUSE_DWELL_MODE_GESTURE,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopMouseDwellMode> for MouseDwellMode {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopMouseDwellMode) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_MOUSE_DWELL_MODE_WINDOW => Self::Window,
            ffi::G_DESKTOP_MOUSE_DWELL_MODE_GESTURE => Self::Gesture,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopPadButtonAction")]
pub enum PadButtonAction {
    #[doc(alias = "G_DESKTOP_PAD_BUTTON_ACTION_NONE")]
    None,
    #[doc(alias = "G_DESKTOP_PAD_BUTTON_ACTION_HELP")]
    Help,
    #[doc(alias = "G_DESKTOP_PAD_BUTTON_ACTION_SWITCH_MONITOR")]
    SwitchMonitor,
    #[doc(alias = "G_DESKTOP_PAD_BUTTON_ACTION_KEYBINDING")]
    Keybinding,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for PadButtonAction {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "PadButtonAction::{}",
            match *self {
                Self::None => "None",
                Self::Help => "Help",
                Self::SwitchMonitor => "SwitchMonitor",
                Self::Keybinding => "Keybinding",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for PadButtonAction {
    type GlibType = ffi::GDesktopPadButtonAction;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopPadButtonAction {
        match self {
            Self::None => ffi::G_DESKTOP_PAD_BUTTON_ACTION_NONE,
            Self::Help => ffi::G_DESKTOP_PAD_BUTTON_ACTION_HELP,
            Self::SwitchMonitor => ffi::G_DESKTOP_PAD_BUTTON_ACTION_SWITCH_MONITOR,
            Self::Keybinding => ffi::G_DESKTOP_PAD_BUTTON_ACTION_KEYBINDING,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopPadButtonAction> for PadButtonAction {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopPadButtonAction) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_PAD_BUTTON_ACTION_NONE => Self::None,
            ffi::G_DESKTOP_PAD_BUTTON_ACTION_HELP => Self::Help,
            ffi::G_DESKTOP_PAD_BUTTON_ACTION_SWITCH_MONITOR => Self::SwitchMonitor,
            ffi::G_DESKTOP_PAD_BUTTON_ACTION_KEYBINDING => Self::Keybinding,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopPointerAccelProfile")]
pub enum PointerAccelProfile {
    #[doc(alias = "G_DESKTOP_POINTER_ACCEL_PROFILE_DEFAULT")]
    Default,
    #[doc(alias = "G_DESKTOP_POINTER_ACCEL_PROFILE_FLAT")]
    Flat,
    #[doc(alias = "G_DESKTOP_POINTER_ACCEL_PROFILE_ADAPTIVE")]
    Adaptive,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for PointerAccelProfile {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "PointerAccelProfile::{}",
            match *self {
                Self::Default => "Default",
                Self::Flat => "Flat",
                Self::Adaptive => "Adaptive",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for PointerAccelProfile {
    type GlibType = ffi::GDesktopPointerAccelProfile;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopPointerAccelProfile {
        match self {
            Self::Default => ffi::G_DESKTOP_POINTER_ACCEL_PROFILE_DEFAULT,
            Self::Flat => ffi::G_DESKTOP_POINTER_ACCEL_PROFILE_FLAT,
            Self::Adaptive => ffi::G_DESKTOP_POINTER_ACCEL_PROFILE_ADAPTIVE,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopPointerAccelProfile> for PointerAccelProfile {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopPointerAccelProfile) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_POINTER_ACCEL_PROFILE_DEFAULT => Self::Default,
            ffi::G_DESKTOP_POINTER_ACCEL_PROFILE_FLAT => Self::Flat,
            ffi::G_DESKTOP_POINTER_ACCEL_PROFILE_ADAPTIVE => Self::Adaptive,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopPointingStickScrollMethod")]
pub enum PointingStickScrollMethod {
    #[doc(alias = "G_DESKTOP_POINTING_STICK_SCROLL_METHOD_DEFAULT")]
    Default,
    #[doc(alias = "G_DESKTOP_POINTING_STICK_SCROLL_METHOD_NONE")]
    None,
    #[doc(alias = "G_DESKTOP_POINTING_STICK_SCROLL_METHOD_ON_BUTTON_DOWN")]
    OnButtonDown,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for PointingStickScrollMethod {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "PointingStickScrollMethod::{}",
            match *self {
                Self::Default => "Default",
                Self::None => "None",
                Self::OnButtonDown => "OnButtonDown",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for PointingStickScrollMethod {
    type GlibType = ffi::GDesktopPointingStickScrollMethod;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopPointingStickScrollMethod {
        match self {
            Self::Default => ffi::G_DESKTOP_POINTING_STICK_SCROLL_METHOD_DEFAULT,
            Self::None => ffi::G_DESKTOP_POINTING_STICK_SCROLL_METHOD_NONE,
            Self::OnButtonDown => ffi::G_DESKTOP_POINTING_STICK_SCROLL_METHOD_ON_BUTTON_DOWN,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopPointingStickScrollMethod> for PointingStickScrollMethod {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopPointingStickScrollMethod) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_POINTING_STICK_SCROLL_METHOD_DEFAULT => Self::Default,
            ffi::G_DESKTOP_POINTING_STICK_SCROLL_METHOD_NONE => Self::None,
            ffi::G_DESKTOP_POINTING_STICK_SCROLL_METHOD_ON_BUTTON_DOWN => Self::OnButtonDown,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopProxyMode")]
pub enum ProxyMode {
    #[doc(alias = "G_DESKTOP_PROXY_MODE_NONE")]
    None,
    #[doc(alias = "G_DESKTOP_PROXY_MODE_MANUAL")]
    Manual,
    #[doc(alias = "G_DESKTOP_PROXY_MODE_AUTO")]
    Auto,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ProxyMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ProxyMode::{}",
            match *self {
                Self::None => "None",
                Self::Manual => "Manual",
                Self::Auto => "Auto",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for ProxyMode {
    type GlibType = ffi::GDesktopProxyMode;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopProxyMode {
        match self {
            Self::None => ffi::G_DESKTOP_PROXY_MODE_NONE,
            Self::Manual => ffi::G_DESKTOP_PROXY_MODE_MANUAL,
            Self::Auto => ffi::G_DESKTOP_PROXY_MODE_AUTO,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopProxyMode> for ProxyMode {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopProxyMode) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_PROXY_MODE_NONE => Self::None,
            ffi::G_DESKTOP_PROXY_MODE_MANUAL => Self::Manual,
            ffi::G_DESKTOP_PROXY_MODE_AUTO => Self::Auto,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopScreensaverMode")]
pub enum ScreensaverMode {
    #[doc(alias = "G_DESKTOP_SCREENSAVER_MODE_BLANK_ONLY")]
    BlankOnly,
    #[doc(alias = "G_DESKTOP_SCREENSAVER_MODE_RANDOM")]
    Random,
    #[doc(alias = "G_DESKTOP_SCREENSAVER_MODE_SINGLE")]
    Single,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ScreensaverMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ScreensaverMode::{}",
            match *self {
                Self::BlankOnly => "BlankOnly",
                Self::Random => "Random",
                Self::Single => "Single",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for ScreensaverMode {
    type GlibType = ffi::GDesktopScreensaverMode;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopScreensaverMode {
        match self {
            Self::BlankOnly => ffi::G_DESKTOP_SCREENSAVER_MODE_BLANK_ONLY,
            Self::Random => ffi::G_DESKTOP_SCREENSAVER_MODE_RANDOM,
            Self::Single => ffi::G_DESKTOP_SCREENSAVER_MODE_SINGLE,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopScreensaverMode> for ScreensaverMode {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopScreensaverMode) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_SCREENSAVER_MODE_BLANK_ONLY => Self::BlankOnly,
            ffi::G_DESKTOP_SCREENSAVER_MODE_RANDOM => Self::Random,
            ffi::G_DESKTOP_SCREENSAVER_MODE_SINGLE => Self::Single,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopStylusButtonAction")]
pub enum StylusButtonAction {
    #[doc(alias = "G_DESKTOP_STYLUS_BUTTON_ACTION_DEFAULT")]
    Default,
    #[doc(alias = "G_DESKTOP_STYLUS_BUTTON_ACTION_MIDDLE")]
    Middle,
    #[doc(alias = "G_DESKTOP_STYLUS_BUTTON_ACTION_RIGHT")]
    Right,
    #[doc(alias = "G_DESKTOP_STYLUS_BUTTON_ACTION_BACK")]
    Back,
    #[doc(alias = "G_DESKTOP_STYLUS_BUTTON_ACTION_FORWARD")]
    Forward,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for StylusButtonAction {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "StylusButtonAction::{}",
            match *self {
                Self::Default => "Default",
                Self::Middle => "Middle",
                Self::Right => "Right",
                Self::Back => "Back",
                Self::Forward => "Forward",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for StylusButtonAction {
    type GlibType = ffi::GDesktopStylusButtonAction;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopStylusButtonAction {
        match self {
            Self::Default => ffi::G_DESKTOP_STYLUS_BUTTON_ACTION_DEFAULT,
            Self::Middle => ffi::G_DESKTOP_STYLUS_BUTTON_ACTION_MIDDLE,
            Self::Right => ffi::G_DESKTOP_STYLUS_BUTTON_ACTION_RIGHT,
            Self::Back => ffi::G_DESKTOP_STYLUS_BUTTON_ACTION_BACK,
            Self::Forward => ffi::G_DESKTOP_STYLUS_BUTTON_ACTION_FORWARD,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopStylusButtonAction> for StylusButtonAction {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopStylusButtonAction) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_STYLUS_BUTTON_ACTION_DEFAULT => Self::Default,
            ffi::G_DESKTOP_STYLUS_BUTTON_ACTION_MIDDLE => Self::Middle,
            ffi::G_DESKTOP_STYLUS_BUTTON_ACTION_RIGHT => Self::Right,
            ffi::G_DESKTOP_STYLUS_BUTTON_ACTION_BACK => Self::Back,
            ffi::G_DESKTOP_STYLUS_BUTTON_ACTION_FORWARD => Self::Forward,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopTabletMapping")]
pub enum TabletMapping {
    #[doc(alias = "G_DESKTOP_TABLET_MAPPING_ABSOLUTE")]
    Absolute,
    #[doc(alias = "G_DESKTOP_TABLET_MAPPING_RELATIVE")]
    Relative,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for TabletMapping {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "TabletMapping::{}",
            match *self {
                Self::Absolute => "Absolute",
                Self::Relative => "Relative",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for TabletMapping {
    type GlibType = ffi::GDesktopTabletMapping;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopTabletMapping {
        match self {
            Self::Absolute => ffi::G_DESKTOP_TABLET_MAPPING_ABSOLUTE,
            Self::Relative => ffi::G_DESKTOP_TABLET_MAPPING_RELATIVE,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopTabletMapping> for TabletMapping {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopTabletMapping) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_TABLET_MAPPING_ABSOLUTE => Self::Absolute,
            ffi::G_DESKTOP_TABLET_MAPPING_RELATIVE => Self::Relative,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopTitlebarAction")]
pub enum TitlebarAction {
    #[doc(alias = "G_DESKTOP_TITLEBAR_ACTION_TOGGLE_SHADE")]
    ToggleShade,
    #[doc(alias = "G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE")]
    ToggleMaximize,
    #[doc(alias = "G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE_HORIZONTALLY")]
    ToggleMaximizeHorizontally,
    #[doc(alias = "G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE_VERTICALLY")]
    ToggleMaximizeVertically,
    #[doc(alias = "G_DESKTOP_TITLEBAR_ACTION_MINIMIZE")]
    Minimize,
    #[doc(alias = "G_DESKTOP_TITLEBAR_ACTION_NONE")]
    None,
    #[doc(alias = "G_DESKTOP_TITLEBAR_ACTION_LOWER")]
    Lower,
    #[doc(alias = "G_DESKTOP_TITLEBAR_ACTION_MENU")]
    Menu,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for TitlebarAction {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "TitlebarAction::{}",
            match *self {
                Self::ToggleShade => "ToggleShade",
                Self::ToggleMaximize => "ToggleMaximize",
                Self::ToggleMaximizeHorizontally => "ToggleMaximizeHorizontally",
                Self::ToggleMaximizeVertically => "ToggleMaximizeVertically",
                Self::Minimize => "Minimize",
                Self::None => "None",
                Self::Lower => "Lower",
                Self::Menu => "Menu",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for TitlebarAction {
    type GlibType = ffi::GDesktopTitlebarAction;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopTitlebarAction {
        match self {
            Self::ToggleShade => ffi::G_DESKTOP_TITLEBAR_ACTION_TOGGLE_SHADE,
            Self::ToggleMaximize => ffi::G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE,
            Self::ToggleMaximizeHorizontally => {
                ffi::G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE_HORIZONTALLY
            }
            Self::ToggleMaximizeVertically => {
                ffi::G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE_VERTICALLY
            }
            Self::Minimize => ffi::G_DESKTOP_TITLEBAR_ACTION_MINIMIZE,
            Self::None => ffi::G_DESKTOP_TITLEBAR_ACTION_NONE,
            Self::Lower => ffi::G_DESKTOP_TITLEBAR_ACTION_LOWER,
            Self::Menu => ffi::G_DESKTOP_TITLEBAR_ACTION_MENU,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopTitlebarAction> for TitlebarAction {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopTitlebarAction) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_TITLEBAR_ACTION_TOGGLE_SHADE => Self::ToggleShade,
            ffi::G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE => Self::ToggleMaximize,
            ffi::G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE_HORIZONTALLY => {
                Self::ToggleMaximizeHorizontally
            }
            ffi::G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE_VERTICALLY => {
                Self::ToggleMaximizeVertically
            }
            ffi::G_DESKTOP_TITLEBAR_ACTION_MINIMIZE => Self::Minimize,
            ffi::G_DESKTOP_TITLEBAR_ACTION_NONE => Self::None,
            ffi::G_DESKTOP_TITLEBAR_ACTION_LOWER => Self::Lower,
            ffi::G_DESKTOP_TITLEBAR_ACTION_MENU => Self::Menu,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopToolbarIconSize")]
pub enum ToolbarIconSize {
    #[doc(alias = "G_DESKTOP_TOOLBAR_ICON_SIZE_SMALL")]
    Small,
    #[doc(alias = "G_DESKTOP_TOOLBAR_ICON_SIZE_LARGE")]
    Large,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ToolbarIconSize {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ToolbarIconSize::{}",
            match *self {
                Self::Small => "Small",
                Self::Large => "Large",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for ToolbarIconSize {
    type GlibType = ffi::GDesktopToolbarIconSize;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopToolbarIconSize {
        match self {
            Self::Small => ffi::G_DESKTOP_TOOLBAR_ICON_SIZE_SMALL,
            Self::Large => ffi::G_DESKTOP_TOOLBAR_ICON_SIZE_LARGE,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopToolbarIconSize> for ToolbarIconSize {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopToolbarIconSize) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_TOOLBAR_ICON_SIZE_SMALL => Self::Small,
            ffi::G_DESKTOP_TOOLBAR_ICON_SIZE_LARGE => Self::Large,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopToolbarStyle")]
pub enum ToolbarStyle {
    #[doc(alias = "G_DESKTOP_TOOLBAR_STYLE_BOTH")]
    Both,
    #[doc(alias = "G_DESKTOP_TOOLBAR_STYLE_BOTH_HORIZ")]
    BothHoriz,
    #[doc(alias = "G_DESKTOP_TOOLBAR_STYLE_ICONS")]
    Icons,
    #[doc(alias = "G_DESKTOP_TOOLBAR_STYLE_TEXT")]
    Text,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ToolbarStyle {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ToolbarStyle::{}",
            match *self {
                Self::Both => "Both",
                Self::BothHoriz => "BothHoriz",
                Self::Icons => "Icons",
                Self::Text => "Text",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for ToolbarStyle {
    type GlibType = ffi::GDesktopToolbarStyle;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopToolbarStyle {
        match self {
            Self::Both => ffi::G_DESKTOP_TOOLBAR_STYLE_BOTH,
            Self::BothHoriz => ffi::G_DESKTOP_TOOLBAR_STYLE_BOTH_HORIZ,
            Self::Icons => ffi::G_DESKTOP_TOOLBAR_STYLE_ICONS,
            Self::Text => ffi::G_DESKTOP_TOOLBAR_STYLE_TEXT,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopToolbarStyle> for ToolbarStyle {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopToolbarStyle) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_TOOLBAR_STYLE_BOTH => Self::Both,
            ffi::G_DESKTOP_TOOLBAR_STYLE_BOTH_HORIZ => Self::BothHoriz,
            ffi::G_DESKTOP_TOOLBAR_STYLE_ICONS => Self::Icons,
            ffi::G_DESKTOP_TOOLBAR_STYLE_TEXT => Self::Text,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopTouchpadClickMethod")]
pub enum TouchpadClickMethod {
    #[doc(alias = "G_DESKTOP_TOUCHPAD_CLICK_METHOD_DEFAULT")]
    Default,
    #[doc(alias = "G_DESKTOP_TOUCHPAD_CLICK_METHOD_NONE")]
    None,
    #[doc(alias = "G_DESKTOP_TOUCHPAD_CLICK_METHOD_AREAS")]
    Areas,
    #[doc(alias = "G_DESKTOP_TOUCHPAD_CLICK_METHOD_FINGERS")]
    Fingers,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for TouchpadClickMethod {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "TouchpadClickMethod::{}",
            match *self {
                Self::Default => "Default",
                Self::None => "None",
                Self::Areas => "Areas",
                Self::Fingers => "Fingers",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for TouchpadClickMethod {
    type GlibType = ffi::GDesktopTouchpadClickMethod;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopTouchpadClickMethod {
        match self {
            Self::Default => ffi::G_DESKTOP_TOUCHPAD_CLICK_METHOD_DEFAULT,
            Self::None => ffi::G_DESKTOP_TOUCHPAD_CLICK_METHOD_NONE,
            Self::Areas => ffi::G_DESKTOP_TOUCHPAD_CLICK_METHOD_AREAS,
            Self::Fingers => ffi::G_DESKTOP_TOUCHPAD_CLICK_METHOD_FINGERS,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopTouchpadClickMethod> for TouchpadClickMethod {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopTouchpadClickMethod) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_TOUCHPAD_CLICK_METHOD_DEFAULT => Self::Default,
            ffi::G_DESKTOP_TOUCHPAD_CLICK_METHOD_NONE => Self::None,
            ffi::G_DESKTOP_TOUCHPAD_CLICK_METHOD_AREAS => Self::Areas,
            ffi::G_DESKTOP_TOUCHPAD_CLICK_METHOD_FINGERS => Self::Fingers,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopTouchpadHandedness")]
pub enum TouchpadHandedness {
    #[doc(alias = "G_DESKTOP_TOUCHPAD_HANDEDNESS_RIGHT")]
    Right,
    #[doc(alias = "G_DESKTOP_TOUCHPAD_HANDEDNESS_LEFT")]
    Left,
    #[doc(alias = "G_DESKTOP_TOUCHPAD_HANDEDNESS_MOUSE")]
    Mouse,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for TouchpadHandedness {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "TouchpadHandedness::{}",
            match *self {
                Self::Right => "Right",
                Self::Left => "Left",
                Self::Mouse => "Mouse",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for TouchpadHandedness {
    type GlibType = ffi::GDesktopTouchpadHandedness;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopTouchpadHandedness {
        match self {
            Self::Right => ffi::G_DESKTOP_TOUCHPAD_HANDEDNESS_RIGHT,
            Self::Left => ffi::G_DESKTOP_TOUCHPAD_HANDEDNESS_LEFT,
            Self::Mouse => ffi::G_DESKTOP_TOUCHPAD_HANDEDNESS_MOUSE,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopTouchpadHandedness> for TouchpadHandedness {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopTouchpadHandedness) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_TOUCHPAD_HANDEDNESS_RIGHT => Self::Right,
            ffi::G_DESKTOP_TOUCHPAD_HANDEDNESS_LEFT => Self::Left,
            ffi::G_DESKTOP_TOUCHPAD_HANDEDNESS_MOUSE => Self::Mouse,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopTouchpadTapButtonMap")]
pub enum TouchpadTapButtonMap {
    #[doc(alias = "G_DESKTOP_TOUCHPAD_BUTTON_TAP_MAP_DEFAULT")]
    Default,
    #[doc(alias = "G_DESKTOP_TOUCHPAD_BUTTON_TAP_MAP_LRM")]
    Lrm,
    #[doc(alias = "G_DESKTOP_TOUCHPAD_BUTTON_TAP_MAP_LMR")]
    Lmr,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for TouchpadTapButtonMap {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "TouchpadTapButtonMap::{}",
            match *self {
                Self::Default => "Default",
                Self::Lrm => "Lrm",
                Self::Lmr => "Lmr",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for TouchpadTapButtonMap {
    type GlibType = ffi::GDesktopTouchpadTapButtonMap;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopTouchpadTapButtonMap {
        match self {
            Self::Default => ffi::G_DESKTOP_TOUCHPAD_BUTTON_TAP_MAP_DEFAULT,
            Self::Lrm => ffi::G_DESKTOP_TOUCHPAD_BUTTON_TAP_MAP_LRM,
            Self::Lmr => ffi::G_DESKTOP_TOUCHPAD_BUTTON_TAP_MAP_LMR,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopTouchpadTapButtonMap> for TouchpadTapButtonMap {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopTouchpadTapButtonMap) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_TOUCHPAD_BUTTON_TAP_MAP_DEFAULT => Self::Default,
            ffi::G_DESKTOP_TOUCHPAD_BUTTON_TAP_MAP_LRM => Self::Lrm,
            ffi::G_DESKTOP_TOUCHPAD_BUTTON_TAP_MAP_LMR => Self::Lmr,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopUsbProtection")]
pub enum UsbProtection {
    #[doc(alias = "G_DESKTOP_USB_PROTECTION_LOCKSCREEN")]
    Lockscreen,
    #[doc(alias = "G_DESKTOP_USB_PROTECTION_ALWAYS")]
    Always,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for UsbProtection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "UsbProtection::{}",
            match *self {
                Self::Lockscreen => "Lockscreen",
                Self::Always => "Always",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for UsbProtection {
    type GlibType = ffi::GDesktopUsbProtection;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopUsbProtection {
        match self {
            Self::Lockscreen => ffi::G_DESKTOP_USB_PROTECTION_LOCKSCREEN,
            Self::Always => ffi::G_DESKTOP_USB_PROTECTION_ALWAYS,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopUsbProtection> for UsbProtection {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopUsbProtection) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_USB_PROTECTION_LOCKSCREEN => Self::Lockscreen,
            ffi::G_DESKTOP_USB_PROTECTION_ALWAYS => Self::Always,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopVisualBellType")]
pub enum VisualBellType {
    #[doc(alias = "G_DESKTOP_VISUAL_BELL_FULLSCREEN_FLASH")]
    FullscreenFlash,
    #[doc(alias = "G_DESKTOP_VISUAL_BELL_FRAME_FLASH")]
    FrameFlash,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for VisualBellType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "VisualBellType::{}",
            match *self {
                Self::FullscreenFlash => "FullscreenFlash",
                Self::FrameFlash => "FrameFlash",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for VisualBellType {
    type GlibType = ffi::GDesktopVisualBellType;

    #[inline]
    fn into_glib(self) -> ffi::GDesktopVisualBellType {
        match self {
            Self::FullscreenFlash => ffi::G_DESKTOP_VISUAL_BELL_FULLSCREEN_FLASH,
            Self::FrameFlash => ffi::G_DESKTOP_VISUAL_BELL_FRAME_FLASH,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopVisualBellType> for VisualBellType {
    #[inline]
    unsafe fn from_glib(value: ffi::GDesktopVisualBellType) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::G_DESKTOP_VISUAL_BELL_FULLSCREEN_FLASH => Self::FullscreenFlash,
            ffi::G_DESKTOP_VISUAL_BELL_FRAME_FLASH => Self::FrameFlash,
            value => Self::__Unknown(value),
        }
    }
}
